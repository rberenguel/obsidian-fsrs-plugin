import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs/promises";
import path from "path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const vaultPath = "/Users/ruben/Library/Mobile Documents/iCloud~md~obsidian/Documents/git-notes-in-icloud/.obsidian/plugins/simple-fsrs";
const prod = (process.argv[2] === "production");

const copyPlugin = {
  name: "copy-to-vault",
  setup: (build) => {
    build.onEnd(async (result) => {
      if (result.errors.length > 0) return;

      console.log("Build succeeded, copying files...");
      await fs.cp("main.js", path.join(vaultPath, "main.js"));
      await fs.cp("manifest.json", path.join(vaultPath, "manifest.json"));
      // Use a try-catch for optional files like styles.css
      try {
        await fs.cp("styles.css", path.join(vaultPath, "styles.css"));
      } catch (err) {
        if (err.code !== 'ENOENT') throw err;
        // Ignore error if styles.css doesn't exist
      }
      console.log("Files copied to vault.");
    });
  },
};
// This plugin now provides a more specific fake for 'os'
const resolveNodeBuiltinsPlugin = {
    name: 'resolve-node-builtins',
    setup(build) {
        // Intercept 'path' and 'os' and redirect them to a virtual namespace
        build.onResolve({ filter: /^(path|os)$/ }, args => ({
            path: args.path,
            namespace: 'node-builtins-ns',
        }));

        // Provide specific fakes for each module
        build.onLoad({ filter: /.*/, namespace: 'node-builtins-ns' }, (args) => {
            let contents = '{}';
            if (args.path === 'os') {
                // Provide a fake platform function
                contents = 'module.exports = { platform: () => "browser" };';
            } else {
                // 'path' can be an empty object
                contents = 'module.exports = {};';
            }
            return {
                contents: contents,
                loader: 'js',
            };
        });
    },
};
const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr"],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
	plugins: [copyPlugin, resolveNodeBuiltinsPlugin]
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
